package com.uniteksolusi.otomill.model;

import com.pi4j.io.i2c.I2CBus;

public class ModelMixer extends ArduinoUnoModel implements MixerIfc {
	
	public static final byte outputOpen = HIGH;  //TODO high or low? 
	public static final byte outputClose = LOW;  //TODO high or low?

	
	///### CONFIGURATION ###///
	transient byte pinRelayMixer = 3;
	transient byte pinRelayPneumaticOutput = 4;
	transient byte pinRelayScrewOut = 5;
	transient byte pinRelayBucketOut = 6;
	transient byte pinBufferLevelPakan[] = {10,11}; //low and full
	byte currentFillLevelPakan = 0;
	byte fillStatePakan = 1; //0=manual, 1=auto
	public byte fillLevelPakan = 0; //0=low,1=full
	boolean isSiloPakanFull = false;

	transient byte pinSensorMixerEmpty = 9;

	transient public int mixerEmptyReadingRetry = 30; //how many times to retry

	/**
	 * The Mixing duration in milis
	 */
	public int mixingDuration = 6000;
	public int ejectingDuration = 6000;
	/**
	 * The expected delay time from start mixing instruction until it is started by the Arduino 
	 */
	transient public long mixingTimeCalibration = 500;
	transient public long ejectingTimeCalibration = 500;
	
	public boolean mixerAlwaysOn = false;
	public boolean screwOutAlwaysOn = false;
	
	
	///### END of CONFIGURATION ###///

	//### running variables ###//
	byte mixingState = 0;  //0/1/2/3/4 = ready / mixing / done mixing / ejecting / stop(suspended)
	
	transient long startMixingTime = -1;
	transient long startEjectingTime = -1;

	transient boolean isReadingMixingEmpty = false;
	transient byte readingMixingEmptyCount = 0;

	
	//status for json 
	boolean isMixerOn = false;
	boolean isOutputOpen = false;
	boolean isScrewOutOn = false;
	boolean isBucketOutOn = false;
	boolean mixerManualMode = false;
	boolean screwManualMode = false;
	boolean bucketManualMode = false;
	
	//boolean isBucketOutOn = false;

	public ModelMixer(I2CBus bus, int address) {
		super(bus, address);
	}
	
	/* (non-Javadoc)
	 * @see com.uniteksolusi.otomill.model.MixerIfc#getMixingDuration()
	 */
	public long getMixingDuration() {
		return mixingDuration;
	}
	
	public void setMixingDuration(int milisDuration) {
		this.mixingDuration = milisDuration;
	}
	public long getEjectingDuration() {
		return ejectingDuration;
	}
	
	public void setEjectingDuration(int milisDuration) {
		this.ejectingDuration = milisDuration;
	}
	

	@Override
	protected void initialize() {
		pinMode(pinRelayMixer, OUTPUT);   
		pinMode(pinRelayPneumaticOutput, OUTPUT);
		pinMode(pinRelayScrewOut, OUTPUT);
		pinMode(pinRelayBucketOut, OUTPUT);
		pinMode(pinBufferLevelPakan[0], INPUT);
		pinMode(pinBufferLevelPakan[1], INPUT);
		pinMode(pinSensorMixerEmpty, INPUT);
	}

	@Override
	protected void mainLoop() {
		//cek silo pakan
		if(digitalRead(pinBufferLevelPakan[0]) == HIGH){
			this.currentFillLevelPakan = 0;
			this.isSiloPakanFull = false;
		}
		else if(digitalRead(pinBufferLevelPakan[1]) == LOW){
			this.currentFillLevelPakan = 1;
			this.isSiloPakanFull = true;
		}
		
		//0/1/2/3 = ready / mixing / done mixing / ejecting
		
		if(mixerManualMode == false){
			if(mixingState == 0) { //ready, do nothing, wait for instruction
				
				logger.finer(this.getId() + " > Mixing State = 0 -> Ready, WAIT for input");
				
			} else if(mixingState == 1) { //mixing process
				
				logger.finer(this.getId() + " > Mixing State = 1 -> MIXING");
				
				if( (System.currentTimeMillis() - startMixingTime + mixingTimeCalibration) > (mixingDuration) ) {
					//it's time, stop
					stopMixing();
				} 
				
			} else if(mixingState == 2) { //done mixing
				
				logger.finer(this.getId() + " > Mixing State = 2 -> Mixing DONE");
				
				startEjecting(); //TODO eject directly?
			
			} else if(mixingState == 3) { //ejecting state
				
				logger.finer(this.getId() + " > Mixing State = 3 -> EJECTING");
				if( (System.currentTimeMillis() - startEjectingTime + ejectingTimeCalibration) > (ejectingDuration) ) {
					//it's time, stop
					stopEjecting();
				}
				//if empty, go back to ready
				if(digitalRead(pinSensorMixerEmpty) == HIGH) { //high means no obstacle (empty), repeat the reading x times
					
					if(!isReadingMixingEmpty) { //first time reading
						
						isReadingMixingEmpty = true;
						readingMixingEmptyCount = 1;
						
					} 
					
					if(readingMixingEmptyCount < mixerEmptyReadingRetry) { //not enough retry yet

						readingMixingEmptyCount++;
//						try {
//							Thread.sleep(mixerEmptyReadingCycle);
//						} catch (InterruptedException e) {
//							System.err.println(this + " > sleep interrupted.");
//						}
					
					} else { //enough retry, stop ejecting
					
						isReadingMixingEmpty = false; 
						readingMixingEmptyCount = 0;
						
						stopEjecting();
						
					}
					
					
				} else if(digitalRead(pinSensorMixerEmpty) == LOW) { //some obstacle, not empty yet
					
					isReadingMixingEmpty = false; 
					readingMixingEmptyCount = 0;
					
				}
			
			}	
		} else{
			
		}
		
		 
		
	}

	@Override
	protected void writeRequestByteSpecific(byte[] requestByte) {
		
	}

	@Override
	protected void readResponseByteSpecific(byte[] responseByte) {
		
	}
	
	/* (non-Javadoc)
	 * @see com.uniteksolusi.otomill.model.MixerIfc#isReadyForMixing()
	 */
	public boolean isReadyForMixing() {
		if(mixingState == 0) {
			return true;
		}
		return false;
	}
	
	/* (non-Javadoc)
	 * @see com.uniteksolusi.otomill.model.MixerIfc#startMixing()
	 */
	public void startMixing() {

		if(mixingState != 1) {
			mixingState = 1;
			startMixingTime = System.currentTimeMillis();

			digitalWrite(pinRelayPneumaticOutput, outputClose);
			isOutputOpen = false;

			digitalWrite(pinRelayMixer, HIGH);
			isMixerOn = true;
		} 
		//else mixingState == 1 -> already mixing, or not ready yet, do nothing
		

	}
	
	/* (non-Javadoc)
	 * @see com.uniteksolusi.otomill.model.MixerIfc#stopMixing()
	 */
	public void stopMixing() {

		mixingState = 2;
		if(!mixerAlwaysOn) {
			digitalWrite(pinRelayMixer, LOW);
			isMixerOn = false;
		}
		
	}


	/* (non-Javadoc)
	 * @see com.uniteksolusi.otomill.model.MixerIfc#startEjecting()
	 */
	public void startEjecting() {

		mixingState = 3;
		if(screwManualMode == false){
			isScrewOutOn = true;
			digitalWrite(pinRelayScrewOut, HIGH);
		}
		if(bucketManualMode == false){
			isBucketOutOn = true;
			digitalWrite(pinRelayBucketOut, HIGH);
		}
		startEjectingTime = System.currentTimeMillis();
//kurang pin relay write
		digitalWrite(pinRelayPneumaticOutput, outputOpen);
		isOutputOpen = true;
		
	}


	/* (non-Javadoc)
	 * @see com.uniteksolusi.otomill.model.MixerIfc#stopEjecting()
	 */
	public void stopEjecting() {

		mixingState = 0;

		digitalWrite(pinRelayPneumaticOutput, outputClose);
		isOutputOpen = false;
		if(screwManualMode == false){
			isScrewOutOn = false;
			digitalWrite(pinRelayScrewOut, LOW);
		}
		if(bucketManualMode == false){
			isBucketOutOn = false;
			digitalWrite(pinRelayBucketOut, LOW);
		}
	}

	public void switchInputBucketOutOn() {
		if(digitalRead(pinRelayBucketOut) == LOW) {
			digitalWrite(pinRelayBucketOut, HIGH);
			isBucketOutOn = true;
		} else {
			digitalWrite(pinRelayBucketOut, LOW);
			isBucketOutOn = false;
		}
	}
	
	public void switchInputScrewOutOn() {
		if(digitalRead(pinRelayScrewOut) == LOW) {
			digitalWrite(pinRelayScrewOut, HIGH);
			isScrewOutOn = true;
		} else {
			digitalWrite(pinRelayScrewOut, LOW);
			isScrewOutOn = false;
		}
	}
	
	public void switchToMixerManualMode() {
		if(mixerManualMode == true) {
			mixerManualMode = false;
		} else {
			mixerManualMode = true;
		}
	}
	
	public void switchToScrewManualMode() {
		if(screwManualMode == true) {
			screwManualMode = false;
		} else {
			screwManualMode = true;
		}
	}
	
	public void switchToBucketManualMode() {
		if(bucketManualMode == true) {
			bucketManualMode = false;
		} else {
			bucketManualMode = true;
		}
	}

	public String getStateString() {
		
		switch(mixingState) {

		case 0: 
			return "READY";
		case 1: 
			return "MIXING";
		case 2: 
			return "DONE MIXING";
		case 3: 
			return "EJECTING";
		default: 
			return "SUSPENDED";

		}
	
	}
	
	public String printStateDetails() {
	
		StringBuffer sb  = new StringBuffer(super.printStateDetails());
		sb.append("\n");
		sb.append("\nState:\t " + mixingState + " / " + this.getStateString()); 
		
		sb.append("\n");
		sb.append("\nMixer Off/On:\t " + digitalRead(pinRelayMixer));
		sb.append("\nOutput Close/Open:\t " + digitalRead(pinRelayPneumaticOutput));
		sb.append("\nScrew Out Off/On:\t " + digitalRead(pinRelayScrewOut));

		sb.append("\n");
		sb.append("\nWayout Not/Empty:\t " + digitalRead(pinSensorMixerEmpty));
		return sb.toString();
	
	}
	
	public String processCommand(String stringCommand) {
		
		String[] cmds = stringCommand.trim().split(" ");
		
		if(cmds.length > 0) {
		
			if("startMixing".equals(cmds[0])) {
				this.startMixing();
				return "OK";
			}
			
			if("stopMixing".equals(cmds[0])) {
				this.stopMixing();
				return "OK"; 
			}
			
			if("startEjecting".equals(cmds[0])) {
				this.startEjecting();
				return "OK"; 
			}
			
			if("stopEjecting".equals(cmds[0])) {
				this.stopEjecting();
				return "OK"; 
			}
			
			if("switchInputScrewOutOn".equals(cmds[0])) {
				this.switchInputScrewOutOn();
				return "OK"; 
			}
			
			if("switchInputBucketOutOn".equals(cmds[0])) {
				this.switchInputBucketOutOn();
				return "OK"; 
			}
			
			if("switchToMixerManualMode".equals(cmds[0])) {
				this.switchToMixerManualMode();
				return "OK"; 
			}
			
			if("switchToScrewManualMode".equals(cmds[0])) {
				this.switchToScrewManualMode();
				return "OK"; 
			}
			
			if("switchToBucketManualMode".equals(cmds[0])) {
				this.switchToBucketManualMode();
				return "OK"; 
			}
			
		}
		
		String parentResponse = super.processCommand(stringCommand);
		if(parentResponse.startsWith("NOK")) {
			parentResponse = parentResponse 
								+ "Available commands "+this.getClass().getSimpleName()
								+": startMixing, stopMixing, startEjecting, stopEjecting, switchInputSrewOutOn, switchInputBucketOutOn, switchToMixerManualMode\n";
		}
		return parentResponse;
	}

}
