package com.uniteksolusi.otomill.util;
import java.io.File;
import java.util.HashMap;

public class FileAccessManager {

private static FileAccessManager instance = new FileAccessManager();
	
	public static FileAccessManager getInstance() {
		return instance;
	}
	
	private FileAccessManager() {

	}
	
	
	HashMap<String, Thread> lockMap = new HashMap<String, Thread>();
	
	public synchronized boolean lock(File f) {
		
		while(lockMap.get(f.getAbsolutePath()) != null) {
			
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		
		lockMap.put(f.getAbsolutePath(), Thread.currentThread());
		
		return true;
		
	}
	
	public boolean release(File f) {
		
		Thread lockOwner = lockMap.get(f.getAbsolutePath()) ; 
		if(lockOwner != null) {
			
			if(lockOwner != Thread.currentThread()) { //locked but current thread is not the owner
				return false;
			} else { //locked and current thread is the owner, then remove
				lockMap.remove(f.getAbsolutePath());
			}
			
		} // else, file is not locked
		
		return true;
		
	}


}
